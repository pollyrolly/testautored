AWSTemplateFormatVersion: 2010-09-09
Description: "CloudFormation Template to deploy infrastructure for an automated Amazon Redshift review"
Parameters:
  RedshiftClusterEndpoint:
    Description: The endpoint of the evaluated Redshift Cluster.
    Type: String
    Default: redshift-cluster-1.ccttwqjmja5e.us-west-2.redshift.amazonaws.com:5439/sample_data_dev
  DbUsername:
    Description: The username of the super user
    Type: String
    Default: awsuser
  WorkflowKey:
    Description: The key name of the workflow
    Type: String
    Default: all-serial
    AllowedValues:
      - all-serial
      - serial-parallel
      - all-parallel
  EmailAddress:
    Type: String
    Description: an email address to subscribe to the SNS topic
    Default: danakath@amazon.com
  CronExpression:
    Description: The cron expression for  starting the revie
    Type: String
    Default: "cron(0 20 ? * SUN *)"
    #https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-cron-expressions.html
  CronStatus:
    Description: The cron expression for  starting the revie
    Type: String
    Default: "DISABLED"
    AllowedValues:
      - "ENABLED"
      - "DISABLED"

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - 
        Label:
          default: "Redshift Cluster and User"
        Parameters:
          - RedshiftClusterEndpoint
          - DbUsername
      - 
        Label:
          default:  "Workflow Type"
        Parameters:
          - WorkflowKey
      - 
        Label:
          default: "SNS Topic and Subscription"
        Parameters:
          - EmailAddress
      - 
        Label:
          default: "Cron job parameters for review"
        Parameters:
          - CronExpression
          - CronStatus

Mappings:
  VariableMap:
    ManifestPath:
      Value: manifest/
    ScriptPath:
      Value: scripts/
    ResultPath:
      Value: result/
    HTMLPath:
      Value: html/
    ErrorPath:
      Value: error/
    ConfigPath:
      Value: config/
    S3BucketNameLocal:
      Value: reignite24-local
    S3BucketNameGlobal:
      Value: reignite24-global
    ErrorTopicName:
      Value: reignite24-error-topic

Resources:

  ErrorSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${!FindInMap [VariableMap, ErrorTopicName, Value]}-${AWS::AccountId}-${AWS::Region}'
  
  EmailSubscription:
    Type: AWS::SNS::Subscription
    DependsOn:
      - ErrorSNSTopic
    Properties:
      TopicArn: !GetAtt ErrorSNSTopic.TopicArn 
      Endpoint: !Ref EmailAddress
      Protocol: email

  SNSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    DependsOn:
      - ErrorSNSTopic
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: 
              AWS: !Sub '${AWS::AccountId}'
            Action: 'sns:Publish'
            Resource: !Ref ErrorSNSTopic
            Condition:
              StringEquals: 
                AWS:SourceOwner: !Sub '${AWS::AccountId}'
      Topics:
        - !GetAtt ErrorSNSTopic.TopicArn 

  S3BucketLocal:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: !Sub '${!FindInMap [VariableMap, S3BucketName, Value]}-${AWS::AccountId}-${AWS::Region}'
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  S3BucketGlobal:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: !Sub '${!FindInMap [VariableMap, S3BucketNameGlobal, Value]}-${AWS::AccountId}-${AWS::Region}'
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true


  NestedStackSFLayer1:
    Type: AWS::CloudFormation::Stack
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      TemplateURL: 'https://s3.amazonaws.com/${!Ref S3BucketNameGlobal}/templates/SFL1Role.yaml'
      Parameters:
        RedshiftClusterEndpoint: !Ref RedshiftClusterEndpoint
        DbUsername: !Ref DbUsername
        S3BucketName: !Ref S3BucketLocal
        ScriptPath: !FindInMap [VariableMap, ScriptPath, Value]
        ResultPath: !FindInMap [VariableMap, ResultPath, Value]
        ErrorPath: !FindInMap [VariableMap, ErrorPath, Value]

  NestedStackLambdasL1:
    Type: AWS::CloudFormation::Stack
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      TemplateURL: 'https://s3.amazonaws.com/${!Ref S3BucketNameGlobal}/templates/LambdasRolesL1.yaml'
      Parameters:
        RedshiftClusterEndpoint: !Ref RedshiftClusterEndpoint
        DbUsername: !Ref DbUsername
        S3BucketNameGlobal: !Ref S3BucketGlobal
        S3BucketName: !Ref S3BucketLocal
        SNSTopic: !GetAtt  ErrorSNSTopic.TopicName
        ScriptPath: !FindInMap [VariableMap, ScriptPath, Value]
        ResultPath: !FindInMap [VariableMap, ResultPath, Value]
        ErrorPath: !FindInMap [VariableMap, ErrorPath, Value]
        ManifestPath: !FindInMap [VariableMap, ManifestPath, Value]
        ConfigPath: !FindInMap [VariableMap, ConfigPath, Value]
        HTMLPath: !FindInMap [VariableMap, HTMLPath, Value]

  CopyScriptsFunction:
    Type: Custom::CopyScriptsFunction
    Properties:
      ServiceToken: !Sub 
      - arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaCopyS}
      - {LambdaCopyS: !GetAtt NestedStackLambdasL1.Outputs.LambdaCopyScriptsFunctionName}

  NestedStackSFLayer2:
    Type: AWS::CloudFormation::Stack
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      TemplateURL: 'https://s3.amazonaws.com/${!Ref S3BucketNameGlobal}/templates/SFL2Role.yaml'
      Parameters:
        SFLayer1StateMachine: !GetAtt NestedStackSFLayer1.Outputs.SFLayer1
        SFLayer1ErrorCStateMachine: !GetAtt NestedStackSFLayer1.Outputs.SFLayer1ErrorHandlingC
        S3BucketName: !Ref S3BucketLocal
        ScriptPath: !FindInMap [VariableMap, ScriptPath, Value]
        ResultPath: !FindInMap [VariableMap, ResultPath, Value]
        ErrorPath: !FindInMap [VariableMap, ErrorPath, Value]
        LambdaWorkflowName: !GetAtt NestedStackLambdasL1.Outputs.LambdaWorkflowFunctionName
        CronExpression: !Ref CronExpression
        CronStatus: !Ref CronStatus

  NestedStackSFLayer3:
    Type: AWS::CloudFormation::Stack
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      TemplateURL: 'https://s3.amazonaws.com/${!Ref S3BucketNameGlobal}/templates/SFL3Role.yaml'
      Parameters:
        StateMachineLayer2: !GetAtt NestedStackSFLayer2.Outputs.SFLayer2
        S3BucketName: !Ref S3BucketLocal
        ScriptPath: !FindInMap [VariableMap, ScriptPath, Value]
        ResultPath: !FindInMap [VariableMap, ResultPath, Value]
        ErrorPath: !FindInMap [VariableMap, ErrorPath, Value]
        HTMLPath: !FindInMap [VariableMap, HTMLPath, Value]
        LambdaCreateOutputName: !GetAtt NestedStackLambdasL1.Outputs.LambdaCreateOutputFunctionName
        LambdaProcessResultsName: !GetAtt NestedStackLambdasL1.Outputs.LambdaProcessResultsFunctionName
        LambdaCreateHTMLName: !GetAtt NestedStackLambdasL1.Outputs.LambdaCreateHTMLFunctionName
        SNSTopic: !GetAtt ErrorSNSTopic.TopicArn

  NestedStackLambdasL2: 
    Type: AWS::CloudFormation::Stack
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      TemplateURL: 'https://s3.amazonaws.com/${!Ref S3BucketNameGlobal}/templates/LambdasRolesL2.yaml'
      Parameters:
        StateMachineL3: !GetAtt NestedStackSFLayer3.Outputs.SFLayer3
        StateMachineL3Html: !GetAtt NestedStackSFLayer3.Outputs.SFLayer3Html
        S3BucketNameGlobal: !Ref S3BucketGlobal
        S3BucketName: !Ref S3BucketLocal
        ScriptPath: !FindInMap [VariableMap, ScriptPath, Value]
        ResultPath: !FindInMap [VariableMap, ResultPath, Value]
        ErrorPath: !FindInMap [VariableMap, ErrorPath, Value]
        ManifestPath: !FindInMap [VariableMap, ManifestPath, Value]
        ConfigPath: !FindInMap [VariableMap, ConfigPath, Value]
        WorkflowKey: !Ref WorkflowKey


  CFLambdaFunction:
    Type: Custom::CFLambdaFunction
    DependsOn: 
      - NestedStackLambdasL2
      - NestedStackSFLayer3
      - NestedStackSFLayer2
      - NestedStackSFLayer1
      - NestedStackLambdasL1
    Properties:
      ServiceToken: !Sub 
      - arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaSF}
      - {LambdaSF: !GetAtt NestedStackLambdasL2.Outputs.CFLambdaFunctionName}
