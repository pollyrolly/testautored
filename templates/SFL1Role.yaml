AWSTemplateFormatVersion: '2010-09-09'
Description: Nested Stack for StateMachines on the Layer of A Single SQL Query

Parameters:
  RedshiftClusterEndpoint:
    Description: The endpoint of the evaluated Redshift Cluster.
    Type: String
    Default: redshift-cluster-1.ccttwqjmja5e.us-west-2.redshift.amazonaws.com:5439/sample_data_dev
  DbUsername:
    Description: The username of a superuser
    Type: String
    Default: awsuser
  ScriptPath:
    Description: Script Path
    Type: String
    Default: scripts/
  ResultPath:
    Description: Result Path
    Type: String
    Default: result/
  ErrorPath:
    Description: Error Path
    Type: String
    Default: error/
  S3BucketName:
    Description: The S3 bucket name for the local bucket
    Type: String
    Default: scripts-logger-266726630905-us-west-2


Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Input Parameters
        Parameters:
          - RedshiftClusterEndpoint
          - DbUsername
          - S3BucketName
          - ScriptPath
          - ResultPath
          - ErrorPath


Resources:

  StateMachineL1LogGroup: 
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: 7
  StateMachineL1LogEHGroup: 
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: 7
  
  LambdaReadDataRole:
    Type: AWS::IAM::Role
    Properties: 
      Description: IAM Role for LambdaReadData
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: lamrol-OutputAccessPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:ListBucket
                  - s3:GetObject
                Resource:
                  - !Sub arn:aws:s3:::${S3BucketName}/*
                  - !Sub arn:aws:s3:::${S3BucketName}/${ErrorPath}*
                  - !Sub arn:aws:s3:::${S3BucketName}/${ResultPath}*
                  - !Sub arn:aws:s3:::${S3BucketName}/${ErrorPath}
                  - !Sub arn:aws:s3:::${S3BucketName}/${ResultPath}
                  - !Sub arn:aws:s3:::${S3BucketName}
        - PolicyName: lamrol-XRayPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                  - xray:GetSamplingRules
                  - xray:GetSamplingTargets
                Resource:
                  - '*'
        - PolicyName: lamrol-redshift1
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - redshift:GetClusterCredentialsWithIAM
                  - redshift:GetClusterCredentials
                Resource:
                  - arn:aws:redshift:*:266726630905:dbuser:*/*
                  - arn:aws:redshift:*:266726630905:dbname:*/*
                  - arn:aws:redshift:*:266726630905:dbgroup:*/*
        - PolicyName: lamrol-redshift2
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - redshift-data:GetStatementResult
                  - redshift-data:DescribeStatement
                  - redshift-data:ListStatements
                Resource:
                  - '*'
  
  StateMachineL1Role:
    Type: AWS::IAM::Role
    Properties:
      Description : IAM Role for SF_L1
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub 'states.amazonaws.com'
                - !Sub 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
          - Effect: Allow
            Principal:
              AWS: !GetAtt LambdaReadDataRole.Arn
            Action: 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchEventsFullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      Policies:
        - PolicyName: sfl1-RedshiftDataApiPolicy1
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'redshift-data:ExecuteStatement'
                Resource: 
                  - !Sub 
                      - arn:aws:redshift:${AWS::Region}:${AWS::AccountId}:cluster:${SourceRedshiftClusterIdentifier}
                      - {SourceRedshiftClusterIdentifier: !Select [0, !Split ['.', !Ref RedshiftClusterEndpoint]]}

        - PolicyName: sfl1-RedshiftDataApiPolicy2
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'redshift-data:DescribeStatement'
                  - 'redshift-data:GetStatementResult'
                Resource: 
                  - '*'
        - PolicyName: sfl1-RedshiftDataApiPolicy3
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'redshift:GetClusterCredentials'
                Resource:
                  - !Sub 
                      - arn:aws:redshift:${AWS::Region}:${AWS::AccountId}:cluster:${SourceRedshiftClusterIdentifier}
                      - {SourceRedshiftClusterIdentifier: !Select [0, !Split ['.', !Ref RedshiftClusterEndpoint]]}
                  - !Sub 
                      - arn:aws:redshift:${AWS::Region}:${AWS::AccountId}:dbname:${SourceRedshiftClusterIdentifier}/${RedshiftDatabaseName}
                      - {SourceRedshiftClusterIdentifier: !Select [0, !Split ['.', !Ref RedshiftClusterEndpoint]],RedshiftDatabaseName: !Select [1, !Split ['/', !Ref RedshiftClusterEndpoint]]}   
                  - !Sub 
                      - arn:aws:redshift:${AWS::Region}:${AWS::AccountId}:dbuser:${SourceRedshiftClusterIdentifier}/${DbUsername}
                      - {SourceRedshiftClusterIdentifier: !Select [0, !Split ['.', !Ref RedshiftClusterEndpoint]]}
        - PolicyName: sfl1-ScriptAccessPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetBucketLocation'
                  - 's3:GetObject'
                  - 's3:ListBucket'
                Resource: 
                  - !Sub arn:aws:s3:::${S3BucketName}/*
                  - !Sub arn:aws:s3:::${S3BucketName}/${ScriptPath}*
                  - !Sub arn:aws:s3:::${S3BucketName}/${ScriptPath}
                  - !Sub arn:aws:s3:::${S3BucketName}
        - PolicyName: sfl1-OutputAccessPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                Resource: 
                  - !Sub arn:aws:s3:::${S3BucketName}/*
                  - !Sub arn:aws:s3:::${S3BucketName}/${ErrorPath}*
                  - !Sub arn:aws:s3:::${S3BucketName}/${ResultPath}*
                  - !Sub arn:aws:s3:::${S3BucketName}/${ErrorPath}
                  - !Sub arn:aws:s3:::${S3BucketName}/${ResultPath}
                  - !Sub arn:aws:s3:::${S3BucketName}
        - PolicyName: sfl1-XRayPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement: 
              - Effect: Allow
                Action :
                  - 'xray:PutTraceSegments'
                  - 'xray:PutTelemetryRecords'
                  - 'xray:GetSamplingRules'
                  - 'xray:GetSamplingTargets'
                Resource:
                  - '*'
        - PolicyName: sfl1-LogsPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement: 
              - Effect: Allow
                Action :
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - '*'
        - PolicyName: sfl1-InvokeLambda
          PolicyDocument:
            Version: 2012-10-17
            Statement: 
              - Effect: Allow
                Action :
                  - 'lambda:InvokeFunction'
                Resource:
                  - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*:*
                  - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:*


  SampleManagedPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowAllUsersToListAccounts
            Effect: Allow
            Action:
              - 'sts:AssumeRole'
            Resource: 
              - !GetAtt StateMachineL1Role.Arn
      Roles: 
        - !Ref LambdaReadDataRole


  LambdaReadData:
    Type: AWS::Lambda::Function
    Properties: 
      Description: Lambda to read data from Redshift
      Handler: index.lambda_handler
      Role: !GetAtt LambdaReadDataRole.Arn
      Timeout: 60
      Runtime: python3.10
      Architectures:
        - x86_64
      Layers:
        - !Sub arn:aws:lambda:${AWS::Region}:017000801446:layer:AWSLambdaPowertoolsPythonV2:71
      Environment:
        Variables: 
          BUCKET_NAME: !Ref S3BucketName
          RESULT_PREFIX: !Ref ResultPath
          SF_ROLE_QUERY: !GetAtt StateMachineL1Role.Arn
          POWERTOOLS_LOG_LEVEL: INFO
          POWERTOOLS_SERVICE_NAME: LambdaRolesL1
      Code:
        ZipFile: |
          import json
          import io
          import csv
          import boto3
          import os

          s3 = boto3.client('s3')

          def get_client(role_arn):
              # create an STS client object that represents a live connection to the 
              # STS service
              sts_client = boto3.client('sts')

              # Call the assume_role method of the STSConnection object and pass the role
              # ARN and a role session name.
              assumed_role_object=sts_client.assume_role(
                  RoleArn=role_arn,
                  RoleSessionName="AssumeRoleSession1"
              )

              # From the response that contains the assumed role, get the temporary 
              # credentials that can be used to make subsequent API calls
              credentials=assumed_role_object['Credentials']
              
              # Use the temporary credentials that AssumeRole returns to make a 
              # connection to Amazon Redsjhift Data  
              redshift_client=boto3.client(
                  'redshift-data',
                  aws_access_key_id=credentials['AccessKeyId'],
                  aws_secret_access_key=credentials['SecretAccessKey'],
                  aws_session_token=credentials['SessionToken'],
              )
              return redshift_client

          def create_csv(json_result):
              column_metadata = json_result['ColumnMetadata']
              column_names = [column['name'] for column in column_metadata]
              records = json_result['Records']
              # Write the CSV data to an in-memory buffer
              csv_buffer = io.StringIO()
              writer = csv.writer(csv_buffer)
              writer.writerow(column_names)
              if  records != []:
                  for record in records:
                      row = []
                      for value in record:
                          if 'stringValue' in value:
                              row.append(value['stringValue'])
                          elif 'longValue' in value:
                              row.append(str(value['longValue']))
                      writer.writerow(row)
              return csv_buffer.getvalue()

          def lambda_handler(event, context):
              # TODO implement
              print(event)
              
              statement = event["Query"]["Script"]
              Id = event["sql_output"]["Id"]
              timestamp = event["Query"]["Timestamp"]
              sf_type = event["SFCallType"]
              role_arn = os.environ["SF_ROLE_QUERY"]
              result_bucket = os.environ["BUCKET_NAME"]
              result_prefix = os.environ["RESULT_PREFIX"]

              client = get_client(role_arn)
              s3 = boto3.client('s3')
              
              try:
                  paginator = client.get_paginator('get_statement_result')
                  response_iterator = paginator.paginate(
                      Id=Id,
                      PaginationConfig={
                          'MaxItems': 50
                      }
                  )
                  total_records =[]
                  for page in response_iterator:
                      print(page)
                      Metadata = page["ColumnMetadata"]
                      Records =  page["Records"]
                      total_records += Records
                  intm = {"ColumnMetadata": Metadata, "Records": total_records}
                  s3.put_object(
                      Body=json.dumps({"ColumnMetadata": Metadata, "Records": total_records}),
                      Bucket=result_bucket,
                      Key=f'{result_prefix}{timestamp}/{statement}.json'
                      )
                      
                  #csv_buf = create_csv(intm)
                  #result = s3.put_object(Bucket=result_bucket, Key=f'{result_prefix}{timestamp}/{statement}.csv', Body=csv_buf)
                  return {
                              "S3BucketName": result_bucket,
                              "QueryList": event["Workflow"],
                              "Query": event["Query"],
                              "Status": event["sql_output"]["Status"]
                          }
              except Exception as e:
                  return {
                          "S3BucketName": result_bucket,
                          "QueryList": event["Workflow"],
                          "Query": event["Query"],
                          "Status": "FAILED",
                          "error" : f"Lambda results error {repr(e)}"
                      }
            

  SFLayer1:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString: !Sub 
        - |-
            {
              "Comment": "Layer 1 State Machine",
              "StartAt": "GetSQLQueryDoc",
              "States": {
                "GetSQLQueryDoc": {
                  "Type": "Task",
                  "Parameters": {
                    "Bucket.$": "$.S3BucketName",
                    "Key.$": "$.Query.ScriptName"
                  },
                  "ResultPath": "$.sql_output",
                  "ResultSelector": {
                    "sql_output.$": "$.Body"
                  },
                  "Resource": "arn:aws:states:::aws-sdk:s3:getObject",
                  "Next": "GetClusterCredentials",
                  "HeartbeatSeconds": 10,
                  "TimeoutSeconds": 300,
                  "Catch": [
                    {
                      "ErrorEquals": [
                        "States.ALL"
                      ],
                      "Next": "ErrorWriteCatcher",
                      "ResultPath": "$.error.getsdlquerydoc"
                    }
                  ]
                },
                "ErrorWriteCatcher": {
                  "Type": "Task",
                  "Parameters": {
                    "Body.$": "$.error",
                    "Bucket.$": "$.S3BucketName",
                    "Key.$": "$.Query.ErrorLocation"
                  },
                  "Resource": "arn:aws:states:::aws-sdk:s3:putObject",
                  "ResultPath": "$.result",
                  "Next": "ErrorPass"
                },
                "ErrorPass": {
                  "Type": "Pass",
                  "Next": "review_query_failure",
                  "Parameters": {
                    "S3BucketName.$": "$.S3BucketName",
                    "QueryList.$": "$.Workflow",
                    "Query.$": "$.Query",
                    "error.$": "$.error",
                    "Status": "FAILED"
                  }
                },
                "GetClusterCredentials": {
                  "Type": "Task",
                  "Parameters": {
                    "ClusterIdentifier": "${RedshiftClusterIdentifier}",
                    "DbUser": "${RedshiftDbUser}"
                  },
                  "Resource": "arn:aws:states:::aws-sdk:redshift:getClusterCredentials",
                  "Next": "ExecuteStatement",
                  "InputPath": "$.sql_output.sql_output",
                  "ResultPath": "$.auth",
                  "TimeoutSeconds": 600,
                  "HeartbeatSeconds": 30,
                  "Catch": [
                    {
                      "ErrorEquals": [
                        "States.ALL"
                      ],
                      "Next": "ErrorWriteCatcher",
                      "ResultPath": "$.error.getclustercredentials"
                    }
                  ]
                },
                "ExecuteStatement": {
                  "Type": "Task",
                  "Parameters": {
                    "ClusterIdentifier": "${RedshiftClusterIdentifier}",
                    "Database": "${RedshiftDbName}",
                    "Sql.$": "$.sql_output.sql_output",
                    "DbUser": "${RedshiftDbUser}"
                  },
                  "Resource": "arn:aws:states:::aws-sdk:redshiftdata:executeStatement",
                  "Next": "PutObject",
                  "ResultPath": "$.sql_output",
                  "Catch": [
                    {
                      "ErrorEquals": [
                        "States.ALL"
                      ],
                      "Next": "ErrorWriteCatcher",
                      "ResultPath": "$.error.executestatement"
                    }
                  ],
                  "TimeoutSeconds": 280,
                  "HeartbeatSeconds": 10
                },
                "PutObject": {
                  "Type": "Task",
                  "Parameters": {
                    "Body.$": "$.sql_output.Id",
                    "Bucket.$": "$.S3BucketName",
                    "Key.$": "$.Query.IDLocation"
                  },
                  "Resource": "arn:aws:states:::aws-sdk:s3:putObject",
                  "Next": "WaitForCompletion",
                  "ResultPath": "$.obj"
                },
                "WaitForCompletion": {
                  "Comment": "Wait before status check",
                  "Type": "Wait",
                  "Seconds": 20,
                  "Next": "CheckStatus"
                },
                "CheckStatus": {
                  "Comment": "Check Query Status",
                  "Type": "Task",
                  "Resource": "arn:aws:states:::aws-sdk:redshiftdata:describeStatement",
                  "ResultPath": "$.sql_output",
                  "Parameters": {
                    "Id.$": "$.sql_output.Id"
                  },
                  "Next": "is_run_complete",
                  "Catch": [
                    {
                      "ErrorEquals": [
                        "States.ALL"
                      ],
                      "Next": "ErrorWriteCatcher",
                      "ResultPath": "$.error.checkstatus"
                    }
                  ]
                },
                "is_run_complete": {
                  "Comment": "check if run_review_query step is complete",
                  "Type": "Choice",
                  "Choices": [
                    {
                      "Variable": "$.sql_output.Status",
                      "StringEquals": "FAILED",
                      "Next": "FailedPass"
                    },
                    {
                      "Variable": "$.sql_output.Status",
                      "StringEquals": "FINISHED",
                      "Next": "ReadResult"
                    }
                  ],
                  "Default": "WaitForCompletion"
                },
                "FailedPass": {
                  "Type": "Pass",
                  "Next": "ErrorWriteCatcher",
                  "ResultPath": "$.error.redshiftfailed"
                },
                "ReadResult": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::lambda:invoke",
                  "OutputPath": "$.Payload",
                  "Parameters": {
                    "Payload.$": "$",
                    "FunctionName": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaName}:$LATEST"
                  },
                  "Next": "review_query_success",
                  "Catch": [
                    {
                      "ErrorEquals": [
                        "States.ALL"
                      ],
                      "Next": "ErrorWriteCatcher",
                      "ResultPath": "$.error.lambdaerror"
                    }
                  ]
                },               
                "review_query_failure": {
                  "Type": "Fail",
                  "Cause": "Failure on Sales Data Pipeline",
                  "Error": "Error"
                },
                "review_query_success": {
                  "Type": "Succeed"
                }
              }
            }
        - RedshiftClusterIdentifier: !Select [0, !Split [".", !Ref RedshiftClusterEndpoint]]
          RedshiftDbName: !Select [1, !Split ["/", !Ref RedshiftClusterEndpoint]]
          RedshiftDbUser: !Ref DbUsername
          LambdaName:  !Select [6, !Split [":", !GetAtt LambdaReadData.Arn]]

      RoleArn: !GetAtt StateMachineL1Role.Arn
      LoggingConfiguration:
          Destinations:
            - CloudWatchLogsLogGroup: 
                LogGroupArn: !GetAtt StateMachineL1LogGroup.Arn
          IncludeExecutionData: false
          Level: "OFF"


  SFLayer1ErrorHandling:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString: !Sub 
        - |-
            {
              "Comment": "Layer 1 State Machine",
              "StartAt": "GetClusterCredentials",
              "States": {
                "ErrorWriteCatcher": {
                  "Type": "Task",
                  "Parameters": {
                    "Body.$": "$.error",
                    "Bucket.$": "$.S3BucketName",
                    "Key.$": "$.Query.ErrorLocation"
                  },
                  "Resource": "arn:aws:states:::aws-sdk:s3:putObject",
                  "Next": "FailPass"
                },
                "FailPass": {
                  "Type": "Pass",
                  "Next": "review_query_failure",
                  "Parameters": {
                    "Query.$": "$.Query",
                    "Status": "FAILED",
                    "QueryList.$": "$.QueryList",
                    "S3BucketName.$": "$.S3BucketName"
                  }
                },
                "GetClusterCredentials": {
                  "Type": "Task",
                  "Parameters": {
                    "ClusterIdentifier": "${RedshiftClusterIdentifier}",
                    "DbUser": "${RedshiftDbUser}"
                  },
                  "Resource": "arn:aws:states:::aws-sdk:redshift:getClusterCredentials",
                  "Next": "GetObject",
                  "ResultPath": "$.auth",
                  "TimeoutSeconds": 600,
                  "HeartbeatSeconds": 30,
                  "Catch": [
                    {
                      "ErrorEquals": [
                        "States.ALL"
                      ],
                      "Next": "ErrorWriteCatcher",
                      "ResultPath": "$.error.getclustercredentials"
                    }
                  ]
                },
                "GetObject": {
                  "Type": "Task",
                  "Parameters": {
                    "Bucket.$": "$.S3BucketName",
                    "Key.$": "$.Query.IDLocation"
                  },
                  "Resource": "arn:aws:states:::aws-sdk:s3:getObject",
                  "Next": "CheckStatus",
                  "ResultSelector": {
                    "Id.$": "States.StringToJson($.Body)"
                  },
                  "ResultPath": "$.output"
                },
                "CheckStatus": {
                  "Comment": "Check Query Status",
                  "Type": "Task",
                  "Resource": "arn:aws:states:::aws-sdk:redshiftdata:describeStatement",
                  "ResultPath": "$.sql_output",
                  "Parameters": {
                    "Id.$": "$.output.Id"
                  },
                  "Next": "is_run_complete",
                  "Catch": [
                    {
                      "ErrorEquals": [
                        "States.ALL"
                      ],
                      "Next": "ErrorWriteCatcher",
                      "ResultPath": "$.error.checkstatus"
                    }
                  ]
                },
                "is_run_complete": {
                  "Comment": "check if run_review_query step is complete",
                  "Type": "Choice",
                  "Choices": [
                    {
                      "Variable": "$.sql_output.Status",
                      "StringEquals": "FAILED",
                      "Next": "FailedPass"
                    },
                    {
                      "Variable": "$.sql_output.Status",
                      "StringEquals": "FINISHED",
                      "Next": "ReadResult"
                    }
                  ],
                  "Default": "CancelStatement"
                },
                "CancelStatement": {
                  "Type": "Task",
                  "Parameters": {
                    "Id.$": "$.sql_output.Id"
                  },
                  "Resource": "arn:aws:states:::aws-sdk:redshiftdata:cancelStatement",
                  "Next": "ErrorWriteCatcher",
                  "ResultPath": "$.error.cancelstatement"
                },
                "FailedPass": {
                  "Type": "Pass",
                  "Next": "ErrorWriteCatcher",
                  "ResultPath": "$.error.redshiftfailed"
                },
                "ReadResult": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::lambda:invoke",
                  "OutputPath": "$.Payload",
                  "Parameters": {
                    "Payload.$": "$",
                    "FunctionName": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaName}:$LATEST"
                  },
                  "Next": "review_query_success",
                  "Catch": [
                    {
                      "ErrorEquals": [
                        "States.ALL"
                      ],
                      "Next": "ErrorWriteCatcher",
                      "ResultPath": "$.error.lambdaerror"
                    }
                  ]
                },
                "review_query_failure": {
                  "Type": "Fail",
                  "Cause": "Failure on Sales Data Pipeline",
                  "Error": "Error"
                },
                "review_query_success": {
                  "Type": "Succeed"
                }
              }
            }
        - RedshiftClusterIdentifier: !Select [0, !Split [".", !Ref RedshiftClusterEndpoint]]
          RedshiftDbName: !Select [1, !Split ["/", !Ref RedshiftClusterEndpoint]]
          RedshiftDbUser: !Ref DbUsername
          LambdaName:  !Select [6, !Split [":", !GetAtt LambdaReadData.Arn]]

      RoleArn: !GetAtt StateMachineL1Role.Arn
      LoggingConfiguration:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt StateMachineL1LogEHGroup.Arn
        IncludeExecutionData: false
        Level: "OFF"


Outputs:
  SFLayer1:
    Description: "The ARN of SFLayer1 state machine"
    Value: !Ref SFLayer1

  SFLayer1ErrorHandlingC:
    Description: "The ARN of SFLayer1ErrorHandling state machine"
    Value: !Ref SFLayer1ErrorHandling
