AWSTemplateFormatVersion: '2010-09-09'
Description: Nested Stack for StateMachines

Parameters:
  SFLayer1StateMachine:
    Description: The ARN of the Step Function
    Type: String
    Default: SF_Layer1-266726630905
  SFLayer1ErrorCStateMachine:
    Description: The ARN of the Step Function
    Type: String
    Default: SF_Layer1-266726630905
  ScriptPath:
    Description: Script Path
    Type: String
    Default: scripts/
  ResultPath:
    Description: Result Path
    Type: String
    Default: result/
  ErrorPath:
    Description: Error Path
    Type: String
    Default: error/
  S3BucketName:
    Description: The S3 bucket name 
    Type: String
    Default: scripts-logger-266726630905-us-west-2
  LambdaWorkflowName:
    Description: The Lambda name  that is
    Type: String
    Default: LambdaWorkflow-266726630905

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Input Parameters
        Parameters:
          - SFLayer1StateMachine
          - SFLayer1ErrorCStateMachine
          - S3BucketName
          - ScriptPath
          - ResultPath
          - ErrorPath
          - LambdaWorkflowName

Resources:
  StateMachineL2LogGroup: 
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: 7

  StateMachineL2Role:
    Type: 'AWS::IAM::Role'
    Properties:
      Description : IAM Role for SF_L2
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub 'states.amazonaws.com'
            Action: 'sts:AssumeRole'

      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchEventsFullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      Policies:
        - PolicyName: sfl2-OutputAccessPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                Resource: 
                  - !Sub arn:aws:s3:::${S3BucketName}/*
                  - !Sub arn:aws:s3:::${S3BucketName}/${ErrorPath}*
                  - !Sub arn:aws:s3:::${S3BucketName}/${ResultPath}*
                  - !Sub arn:aws:s3:::${S3BucketName}/${ErrorPath}
                  - !Sub arn:aws:s3:::${S3BucketName}/${ResultPath}
                  - !Sub arn:aws:s3:::${S3BucketName}
        - PolicyName: sfl2-XRayPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement: 
              - Effect: Allow
                Action :
                  - 'xray:PutTraceSegments'
                  - 'xray:PutTelemetryRecords'
                  - 'xray:GetSamplingRules'
                  - 'xray:GetSamplingTargets'
                Resource:
                  - '*'
        - PolicyName: sfl2-sfExecution
          PolicyDocument:
            Version: 2012-10-17
            Statement: 
              - Effect: Allow
                Action :
                  - 'states:DescribeExecution'
                  - 'states:StartExecution'
                  - 'states:StopExecution'
                Resource:
                  - !Sub '${SFLayer1StateMachine}'
                  - !Sub '${SFLayer1StateMachine}:*'
                  - !Sub '${SFLayer1ErrorCStateMachine}'
                  - !Sub '${SFLayer1ErrorCStateMachine}:*'
                  - !Sub
                      - arn:aws:states:${AWS::Region}:${AWS::AccountId}:execution:${SFname}:*
                      - {SFname: !Select [6, !Split [':', !Ref SFLayer1StateMachine]]}
                  - !Sub
                      - arn:aws:states:${AWS::Region}:${AWS::AccountId}:execution:${SFnameErrorH}:*
                      - {SFnameErrorH: !Select [6, !Split [':', !Ref SFLayer1ErrorCStateMachine]]}
        - PolicyName: sfl2-InvokeLambda
          PolicyDocument:
            Version: 2012-10-17
            Statement: 
              - Effect: Allow
                Action :
                  - 'lambda:InvokeFunction'
                Resource:
                  - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaWorkflowName}:*
                  - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:${LambdaWorkflowName}

        - PolicyName: LogsPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement: 
              - Effect: Allow
                Action :
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - '*'
  SFLayer2:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString: !Sub 
        - |-
            {
              "Comment": "A description of my state machine made to trigger update",
              "StartAt": "Step Functions StartExecution",
              "States": {
                "Step Functions StartExecution": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::states:startExecution.sync:2",
                  "Parameters": {
                    "Input": {
                      "Status.$": "$.Status",
                      "Workflow.$": "$.QueryList",
                      "Query.$": "$.Query",
                      "S3BucketName": "${S3BucketName}",
                      "SFCallType" : "QUERY",
                      "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id"
                    },
                    "StateMachineArn": "${SFLayer1StateMachine}"
                  },
                  "Next": "Choice",
                  "ResultPath": "$.result",
                  "TimeoutSecondsPath": "$.Query.TimeThreshold",
                  "Catch": [
                    {
                      "ErrorEquals": [
                        "States.ALL"
                      ],
                      "Next": "Step Functions StartExecutionCancel",
                      "ResultPath": "$.error"
                    }
                  ]
                },
                "Choice": {
                  "Type": "Choice",
                  "Choices": [
                    {
                      "Variable": "$.result.Output",
                      "IsPresent": true,
                      "Next": "ResultPathPass"
                    },
                    {
                      "Variable": "$.Output",
                      "IsPresent": true,
                      "Next": "OutputPathPass"
                    }
                  ],
                  "Default": "DirectPathPass"
                },
                "ResultPathPass": {
                  "Type": "Pass",
                  "Next": "WorkflowOrchestrator",
                  "Parameters": {
                    "Query.$": "$.result.Output.Query",
                    "QueryList.$": "$.result.Output.QueryList",
                    "Status.$": "$.result.Output.Status",
                    "S3BucketName.$": "$.result.Output.S3BucketName"
                  }
                },
                "Step Functions StartExecutionCancel": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::states:startExecution.sync:2",
                  "Parameters": {
                    "StateMachineArn": "${SFLayer1ErrorCStateMachine}",
                    "Input": {
                      "Workflow.$": "$.QueryList",
                      "Query.$": "$.Query",
                      "S3BucketName": "${S3BucketName}",
                      "SFCallType" : "ERROR",
                      "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id"
                    }
                  },
                  "Next": "Choice",
                  "Catch": [
                    {
                      "ErrorEquals": [
                        "States.ALL"
                      ],
                      "Next": "Choice"
                    }
                  ]
                },
                "DirectPathPass": {
                  "Type": "Pass",
                  "Next": "WorkflowOrchestrator"
                },
                "PutObjectLogError": {
                  "Type": "Task",
                  "Parameters": {
                    "Body.$": "$.Output",
                    "Bucket.$": "$.Output.S3BucketName",
                    "Key.$": "$.Output.Query.ErrorLocation"
                  },
                  "Resource": "arn:aws:states:::aws-sdk:s3:putObject",
                  "End": true
                },
                "WorkflowOrchestrator": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::lambda:invoke",
                  "OutputPath": "$.Payload",
                  "Parameters": {
                    "Payload.$": "$",
                      "FunctionName": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaWorkflowName}:$LATEST"
                  },
                  "Next": "if_end_of_workflow",
                  "Catch": [
                    {
                      "ErrorEquals": [
                        "States.ALL"
                      ],
                      "ResultPath": "$.error",
                      "Next": "PutObjectLogError"
                    }
                  ]
                },
                "if_end_of_workflow": {
                  "Type": "Choice",
                  "Choices": [
                    {
                      "Variable": "$.continue",
                      "BooleanEquals": false,
                      "Next": "PutObjectLogEnd"
                    }
                  ],
                  "Default": "Step Functions StartExecution",
                  "OutputPath": "$.body"
                },
                "PutObjectLogEnd": {
                  "Type": "Task",
                  "Parameters": {
                    "Body.$": "$",
                    "Bucket.$": "$.S3BucketName",
                    "Key.$": "$.Query.OutputLocation"
                  },
                  "Resource": "arn:aws:states:::aws-sdk:s3:putObject",
                  "End": true,
                  "ResultPath": "$.input"
                },
                "OutputPathPass": {
                  "Type": "Pass",
                  "Next": "WorkflowOrchestrator",
                  "Parameters": {
                    "Query.$": "$.Output.Query",
                    "QueryList.$": "$.Output.QueryList",
                    "Status.$": "$.Output.Status",
                    "S3BucketName.$": "$.Output.S3BucketName"
                  }
                }
              }
            }
        - LambdaWorkflowName: !Ref LambdaWorkflowName
          S3BucketName: !Ref S3BucketName
          SFLayer1StateMachine: !Ref SFLayer1StateMachine

      RoleArn: !GetAtt StateMachineL2Role.Arn
      LoggingConfiguration:
          Destinations:
            - CloudWatchLogsLogGroup: 
                LogGroupArn: !GetAtt StateMachineL2LogGroup.Arn
          IncludeExecutionData: false
          Level: "OFF"
Outputs:
  SFLayer2:
    Description: "The ARN of SFLayer2 state machine"
    Value: !Ref SFLayer2
