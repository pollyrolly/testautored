AWSTemplateFormatVersion: '2010-09-09'
Description: Nested Stack for S3 buckets

Parameters:
  StateMachineLayer2:
    Description: The ARN of the Step Function
    Type: String
    Default: arn:aws:states:us-west-2:266726630905:stateMachine:MyStateMachine-b224rd7fn
  ScriptPath:
    Description: Script Path
    Type: String
    Default: scripts/
  ResultPath:
    Description: Result Path
    Type: String
    Default: result/
  ErrorPath:
    Description: Error Path
    Type: String
    Default: error/
  HTMLPath:
    Description: Error Path
    Type: String
    Default: error/
  ManifestPath:
    Description: Manifest Path
    Type: String
    Default: manifest/
  S3BucketName:
    Description: The S3 bucket name 
    Type: String
    Default: scripts-logger-266726630905-us-west-2
  LambdaProcessResultsName:
    Description: The Lambda name
    Type: String
    Default: LambdaProcessResults-266726630905
  LambdaCreateOutputName:
    Description: The Lambda  name
    Type: String
    Default: LambdaCreateOutput-266726630905
  LambdaCreateHTMLName:
    Description: The Lambda 
    Type: String
    Default: LambdaCreateHTML-266726630905
  SNSTopic:
    Description: SNS Topic 
    Type: String
    Default: redshift_review_error_topic_standard


Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Input Parameters
        Parameters:
          - StateMachineLayer2
          - S3BucketName
          - ScriptPath
          - ResultPath
          - ErrorPath
          - HTMLPath
          - ManifestPath
          - LambdaCreateOutputName
          - LambdaProcessResultsName
          - LambdaCreateHTMLName
          - SNSTopic

Resources:
  StateMachineL3LogGroup: 
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: 7

  StateMachineL3HtmlLogGroup: 
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: 7

  StateMachineL3Role:
    Type: 'AWS::IAM::Role'
    Properties:
      Description : IAM Role for SF_L1
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub 'states.amazonaws.com'
            Action: 'sts:AssumeRole'

      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchEventsFullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      Policies:
        - PolicyName: sfl3-ScriptAccessPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetBucketLocation'
                  - 's3:GetObject'
                  - 's3:ListBucket'
                Resource: 
                  - !Sub arn:aws:s3:::${S3BucketName}/*
                  - !Sub arn:aws:s3:::${S3BucketName}/${ManifestPath}*
                  - !Sub arn:aws:s3:::${S3BucketName}/${ManifestPath}
                  - !Sub arn:aws:s3:::${S3BucketName}
        - PolicyName: sfl3-OutputAccessPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                  - 's3:GetObject'
                  - 's3:ListBucket'
                Resource: 
                  - !Sub arn:aws:s3:::${S3BucketName}/*
                  - !Sub arn:aws:s3:::${S3BucketName}/${ErrorPath}*
                  - !Sub arn:aws:s3:::${S3BucketName}/${ResultPath}*
                  - !Sub arn:aws:s3:::${S3BucketName}/${ErrorPath}
                  - !Sub arn:aws:s3:::${S3BucketName}/${ResultPath}
                  - !Sub arn:aws:s3:::${S3BucketName}
        - PolicyName: sfl3-XRayPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement: 
              - Effect: Allow
                Action :
                  - 'xray:PutTraceSegments'
                  - 'xray:PutTelemetryRecords'
                  - 'xray:GetSamplingRules'
                  - 'xray:GetSamplingTargets'
                Resource:
                  - '*'
        - PolicyName: sfl3-sfExecution
          PolicyDocument:
            Version: 2012-10-17
            Statement: 
              - Effect: Allow
                Action :
                  - 'states:DescribeExecution'
                  - 'states:StartExecution'
                  - 'states:StopExecution'
                Resource:
                  - !Sub ${StateMachineLayer2}
                  - !Sub ${StateMachineLayer2}:*
                  - !Sub
                    - arn:aws:states:${AWS::Region}:${AWS::AccountId}:execution:${SFname}:*
                    - {SFname: !Select [6, !Split [':', !Ref StateMachineLayer2]]}
        - PolicyName: sfl3-InvokeLambda
          PolicyDocument:
            Version: 2012-10-17
            Statement: 
              - Effect: Allow
                Action :
                  - 'lambda:InvokeFunction'
                Resource:
                  - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaProcessResultsName}:*
                  - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaProcessResultsName}
                  - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaCreateOutputName}:*
                  - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaCreateOutputName}
                  - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:${LambdaCreateOutputName}
                  - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:${LambdaCreateHTMLName}
                  - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:${LambdaProcessResultsName}
                  - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaCreateHTMLName}:*
                  - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaCreateHTMLName}
        - PolicyName: sfl3-LogsPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement: 
              - Effect: Allow
                Action :
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - '*'
        - PolicyName: sfl3-sns1
          PolicyDocument:
            Version: 2012-10-17
            Statement: 
              - Effect: Allow
                Action :
                - sns:Publish
                Resource:
                  - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:*
        - PolicyName: sfl3-sns2
          PolicyDocument:
            Version: 2012-10-17
            Statement: 
              - Effect: Allow
                Action :
                - sns:ListTopics
                Resource:
                  - '*'
  SFLayer3:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString: !Sub 
        - |-
            {
              "Comment": "A description of my state machine made to trigger update",
              "StartAt": "Step Functions StartExecution",
              "States": {
                "Step Functions StartExecution": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::states:startExecution",
                  "Parameters": {
                    "StateMachineArn": "${StateMachineLayer2}",
                    "Input": {
                      "QueryList.$": "$.QueryList",
                      "Query.$": "$.Query",
                      "S3BucketName.$": "$.S3BucketName",
                      "Status.$" : "$.Status",
                      "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id"
                    }
                  },
                  "Next": "Wait",
                  "ResultPath": "$.result"
                },
                "Wait": {
                  "Type": "Wait",
                  "Seconds": 120,
                  "Next": "DescribeExecution"
                },
                "DescribeExecution": {
                  "Type": "Task",
                  "Parameters": {
                    "ExecutionArn.$": "$.result.ExecutionArn"
                  },
                  "Resource": "arn:aws:states:::aws-sdk:sfn:describeExecution",
                  "Next": "if_sf_running",
                  "InputPath": "$",
                  "ResultPath": "$.input"
                },
                "if_sf_running": {
                  "Type": "Choice",
                  "Choices": [
                    {
                      "Variable": "$.input.Status",
                      "StringEquals": "RUNNING",
                      "Next": "Wait"
                    }
                  ],
                  "Default": "ProcessResults",
                  "OutputPath": "$"
                },
                "ProcessResults": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::lambda:invoke",
                  "OutputPath": "$.Payload",
                  "Parameters": {
                    "Payload.$": "$",
                    "FunctionName": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaProcessResultsName}:$LATEST"
                  },
                  "Next": "if_persistant_error"
                },
                "if_persistant_error": {
                  "Type": "Choice",
                  "Choices": [
                    {
                      "Variable": "$.rerun",
                      "BooleanEquals": true,
                      "Next": "Step Functions StartExecution"
                    },
                    {
                      "And": [
                        {
                          "Variable": "$.succeeded",
                          "BooleanEquals": false
                        },
                        {
                          "Variable": "$.rerun",
                          "BooleanEquals": false
                        }
                      ],
                      "Next": "SNS Publish"
                    }
                  ],
                  "Default": "CreateOutput",
                  "OutputPath": "$.body"
                },
                "CreateOutput": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::lambda:invoke",
                  "OutputPath": "$.Payload",
                  "Parameters": {
                    "Payload.$": "$",
                    "FunctionName": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaCreateOutputName}:$LATEST"
                  },
                  "End": true
                },
                "SNS Publish": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::sns:publish",
                  "Parameters": {
                    "Message.$": "$",
                    "TopicArn": "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${SNSTopic}"
                  },
                  "End": true,
                  "InputPath": "$.error"
                }
              }
            }
        - LambdaCreateOutputName: !Ref LambdaCreateOutputName
          S3BucketName: !Ref S3BucketName
          StateMachineLayer2: !Ref StateMachineLayer2
          LambdaProcessResultsName: !Ref LambdaProcessResultsName
          SNSTopic: !Ref SNSTopic

      RoleArn: !GetAtt StateMachineL3Role.Arn
      LoggingConfiguration:
          Destinations:
            - CloudWatchLogsLogGroup: 
                LogGroupArn: !GetAtt StateMachineL3LogGroup.Arn
          IncludeExecutionData: false
          Level: "OFF"

  SFLayer3Html:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString: !Sub 
        - |-
            {
              "Comment": "A description of my state machine made to trigger update",
              "StartAt": "CreateHTML",
              "States": {
                "CreateHTML": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::lambda:invoke",
                  "OutputPath": "$.Payload",
                  "Parameters": {
                    "Payload.$": "$",
                    "FunctionName": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaCreateHTMLName}:$LATEST"
                  },
                  "Next": "Wait"
                },
                "Wait": {
                  "Type": "Wait",
                  "Next": "IF WaitForOutput",
                  "SecondsPath": "$.body.wait_time",
                  "OutputPath": "$.body"
                },
                "IF WaitForOutput": {
                  "Type": "Choice",
                  "Choices": [
                    {
                      "Variable": "$.wait",
                      "NumericLessThanEquals": 0,
                      "Next": "SNS Publish"
                    }
                  ],
                  "Default": "CreateHTML",
                  "OutputPath": "$"
                },
                "SNS Publish": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::sns:publish",
                  "Parameters": {
                    "Message.$": "$.message",
                    "TopicArn": "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${SNSTopic}"
                  },
                  "Next": "Success"
                },
                "Success": {
                  "Type": "Succeed"
                }
              }
            }
        - LambdaCreateHTMLName: !Ref LambdaCreateHTMLName
          SNSTopic: !Ref SNSTopic

      RoleArn: !GetAtt StateMachineL3Role.Arn
      LoggingConfiguration:
          Destinations:
            - CloudWatchLogsLogGroup: 
                LogGroupArn: !GetAtt StateMachineL3HtmlLogGroup.Arn
          IncludeExecutionData: false
          Level: "OFF"


Outputs:
  SFLayer3:
    Description: "SFLayer3 ARN"
    Value: !Ref  SFLayer3

  SFLayer3Html:
    Description: "SFLayer3Html ARN"
    Value: !Ref  SFLayer3Html